{
  "name": "switch",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/switch.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst switchVariants = cva(\n  \"peer inline-flex shrink-0 cursor-pointer items-center border-2 border-transparent transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n  {\n    variants: {\n      variant: {\n        default: \"rounded-full shadow-sm\",\n        box: \"rounded-md shadow-sm\",\n        square: \"rounded-none shadow-sm\",\n        retro: \"rounded border-2 border-border bg-background shadow-inner\",\n      },\n      size: {\n        sm: \"h-4 w-7\",\n        default: \"h-5 w-9\",\n        lg: \"h-6 w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst switchThumbVariants = cva(\n  \"pointer-events-none block bg-background transition-all\",\n  {\n    variants: {\n      variant: {\n        default: \"rounded-full shadow\",\n        box: \"rounded-sm shadow\",\n        square: \"rounded-none shadow\",\n        retro: \"rounded shadow-sm border border-border\",\n      },\n      size: {\n        sm: \"h-3 w-3 data-[state=checked]:translate-x-3\",\n        default: \"h-4 w-4 data-[state=checked]:translate-x-4\",\n        lg: \"h-5 w-5 data-[state=checked]:translate-x-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface SwitchProps\n  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>,\n    VariantProps<typeof switchVariants> {\n  thumbVariant?: VariantProps<typeof switchThumbVariants>[\"variant\"];\n  showLabels?: boolean;\n}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(({ className, variant, size, thumbVariant, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(switchVariants({ variant, size, className }))}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        switchThumbVariants({\n          variant: thumbVariant || variant,\n          size,\n        }),\n      )}\n    />\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}